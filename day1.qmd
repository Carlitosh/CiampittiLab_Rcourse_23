---
title: "Week 1: Intro to R - Tidyverse"
format: html
editor: visual
---

# 1) R Studio Interface. 
Where to work in R Studio? .R, .qmd, .Rmd files

- 1.a) Create sequence of numbers
the colon operator (:) returns every interger between two intergers.
```{r}
# One line of results
1:5
# More than one line of results
100:150
```


- 1.b) Incomplete commands: use chunks and console to analyze errors
```{r}
5 - 
# See in the console (complete the command)
```


- 1.c) Errors in R
```{r}
# I want to multiply
3 x 5
# Try a different command to do what you want
3*5
```


- 1.d) R as calculator
```{r}
1+1
3*2
(4*3)/2
```


- 1.e) Boolean operators (logical results)
'>', '<', '>=', '<=', '==', '!=', '&', '|'
```{r}

```


+ Bonus Extra: What does the semicolon (;) do in R?
```{r}
# Run one command by line
5+3
2+5
# Run more than one command in a line
5+3; 2+5
```


# 3) Types of data in R
```{r}
# Integers: positive and negative whole numbers (including zero)
typeof(1:3)
# Double or Numeric: any real number
typeof(0.01:0.1)
# Character: text
typeof("Hello")
# Logical: TRUE's and FALSE's
typeof(7>9)

```



# 3) Objects
Objects allows you to save data into your computer's memory.
What is an object in R? An object is just a name you can choose to call up stored data.

- 2.a) Creating objects
```{r}
10:20
# Save the sequence in your computer's memory (operators: "<-" or "=")
sq <- 10:20
# Call the saved data
sq

# Can I operate using objects?
```


- 2.b) R is case-sensitive: silly source of errors
```{r}
# Create an object with character data
a_greet <- c("Hello", "OlÃ¡", "Hola")

A_greet
```


- 2.c) R overwrites the information stored in an object
```{r}

```



# 4) Functions
A function is just an R object that performs statements in a predefined order.
Main stricture of a function:
     -> function_name(argument1 = value1, argument2 = value2, ...) <-

- 4.a) Create and roll a dice
```{r}

```


# 5) Packages
Packages are a collection of functions, documentation, and data sets.
R packages extend the capabilities of base R.

5.a) Installing the packages: readxl, tidyverse (easypackages)
```{r}

```



# 6) Tidyverse: a collection of packages
- 6.a) Calling Packages
```{r}
easypackages::packages("tidyverse")
```



- 6.b) Reading the data
```{r}
# Untidy data


# Tady data

```


6.c) Pipes

Two different pipes: 
  i) R pipe "|>"
  ii) tidyverse pipe "%>%"
```{r}
# Take a look at your data frame
df

# Get the main information of your data frame in another way
dplyr::glimpse(df)

# Use pipes

df %>% 
  dplyr::glimpse()
```


- 6.d) Some useful tidyverse functions

"select" function: grab just some columns from your data frame
-   Helper functions:
        - starts_with()
        - ends_with()
        - contains(): Contains a literal string.
        - matches(): Matches a regular expression (repeated characters).
        - num_range()
        
```{r}
# Select location, year, and date variable


# Alternatives to do the same


# Helper functions

```


"filter" function: select rows that satisfy a logic test
-  Helper function
      - between()

```{r}
# Select the doy in which 2 <= rain <= was between 2 and 10 mm

# Option 1: "between" function

# Option 2: logical operations

```


"arrange" function: orders the rows of a data frame
```{r}
# Reorder the data frame rows according to the highest-to-low precipitation order

```


"mutate" function: create new columns
```{r}
# Calculate mean air temperature

```


"rename" function: change the name of a variable (column)
```{r}
# Change the name of AirTemp_max and AirTemp_min so that the new names were temp_min and temp_max, respectively.

```


"across" function: select the columns to which you want to apply a function 
```{r}
# Coerce the year variable from type numeric (double) to type caracter 

```



Using the functions: making the most of the pipes
```{r}
# Calculate the mean air temperature between the day 10 and day 100 of the year. Then, within this interval, find the day of the year with the highest mean temperature. Code so that you show only the days of the year and their corresponding average temperature.

  
```


# 7) Good coding habits

-   Put all library() calls at the top of the script.
-   Organize your files into 'data', 'notebook'/'markdown', 'output'.
-   Comment your code.
-   Object names:
    -   Don't start with numbers
    -   Shortest understandable
-   Each %>% followed by a new line.
-   Avoid long lines (start a new line after comma).


# 8) Class project
Find a student/visiting scholar to work with!
Get data and think about ideas.
